// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Models;
//
//    var jsonModel = JsonModel.FromJson(jsonString);

namespace Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class JsonModel
    {
        [JsonProperty("artist", NullValueHandling = NullValueHandling.Ignore)]
        public string Artist { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("genre", NullValueHandling = NullValueHandling.Ignore)]
        public Genre? Genre { get; set; }

        [JsonProperty("image_uri", NullValueHandling = NullValueHandling.Ignore)]
        public string ImageUri { get; set; }

        [JsonProperty("uri", NullValueHandling = NullValueHandling.Ignore)]
        public string Uri { get; set; }

        [JsonProperty("debut_album_year", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public long? DebutAlbumYear { get; set; }

        [JsonProperty("track_name", NullValueHandling = NullValueHandling.Ignore)]
        public TrackName? TrackName { get; set; }

        [JsonProperty("song_uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SongUri { get; set; }

        [JsonProperty("song_image_uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SongImageUri { get; set; }

        [JsonProperty("group_size", NullValueHandling = NullValueHandling.Ignore)]
        public long? GroupSize { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public Gender? Gender { get; set; }

        [JsonProperty("embedded_track", NullValueHandling = NullValueHandling.Ignore)]
        public Uri EmbeddedTrack { get; set; }
    }

    public enum Gender { F, M, Nb, X };

    public enum Genre { African, Alternative, Classical, Country, Electronic, HipHop, Jazz, Latin, Metal, Pop, RB, Reggae, Religious, Rock };

    public partial struct TrackName
    {
        public long? Integer;
        public string String;

        public static implicit operator TrackName(long Integer) => new TrackName { Integer = Integer };
        public static implicit operator TrackName(string String) => new TrackName { String = String };
    }

    public partial class JsonModel
    {
        public static List<JsonModel> FromJson(string json) => JsonConvert.DeserializeObject<List<JsonModel>>(json, Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<JsonModel> self) => JsonConvert.SerializeObject(self, Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GenderConverter.Singleton,
                GenreConverter.Singleton,
                TrackNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DecodingChoiceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return integerValue;
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return l;
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value);
            return;
        }

        public static readonly DecodingChoiceConverter Singleton = new DecodingChoiceConverter();
    }

    internal class GenderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gender) || t == typeof(Gender?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "f":
                    return Gender.F;
                case "m":
                    return Gender.M;
                case "nb":
                    return Gender.Nb;
                case "x":
                    return Gender.X;
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Gender)untypedValue;
            switch (value)
            {
                case Gender.F:
                    serializer.Serialize(writer, "f");
                    return;
                case Gender.M:
                    serializer.Serialize(writer, "m");
                    return;
                case Gender.Nb:
                    serializer.Serialize(writer, "nb");
                    return;
                case Gender.X:
                    serializer.Serialize(writer, "x");
                    return;
            }
            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly GenderConverter Singleton = new GenderConverter();
    }

    internal class GenreConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Genre) || t == typeof(Genre?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "African":
                    return Genre.African;
                case "Alternative":
                    return Genre.Alternative;
                case "Classical":
                    return Genre.Classical;
                case "Country":
                    return Genre.Country;
                case "Electronic":
                    return Genre.Electronic;
                case "Hip Hop":
                    return Genre.HipHop;
                case "Jazz":
                    return Genre.Jazz;
                case "Latin":
                    return Genre.Latin;
                case "Metal":
                    return Genre.Metal;
                case "Pop":
                    return Genre.Pop;
                case "R&B":
                    return Genre.RB;
                case "Reggae":
                    return Genre.Reggae;
                case "Religious":
                    return Genre.Religious;
                case "Rock":
                    return Genre.Rock;
            }
            throw new Exception("Cannot unmarshal type Genre");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Genre)untypedValue;
            switch (value)
            {
                case Genre.African:
                    serializer.Serialize(writer, "African");
                    return;
                case Genre.Alternative:
                    serializer.Serialize(writer, "Alternative");
                    return;
                case Genre.Classical:
                    serializer.Serialize(writer, "Classical");
                    return;
                case Genre.Country:
                    serializer.Serialize(writer, "Country");
                    return;
                case Genre.Electronic:
                    serializer.Serialize(writer, "Electronic");
                    return;
                case Genre.HipHop:
                    serializer.Serialize(writer, "Hip Hop");
                    return;
                case Genre.Jazz:
                    serializer.Serialize(writer, "Jazz");
                    return;
                case Genre.Latin:
                    serializer.Serialize(writer, "Latin");
                    return;
                case Genre.Metal:
                    serializer.Serialize(writer, "Metal");
                    return;
                case Genre.Pop:
                    serializer.Serialize(writer, "Pop");
                    return;
                case Genre.RB:
                    serializer.Serialize(writer, "R&B");
                    return;
                case Genre.Reggae:
                    serializer.Serialize(writer, "Reggae");
                    return;
                case Genre.Religious:
                    serializer.Serialize(writer, "Religious");
                    return;
                case Genre.Rock:
                    serializer.Serialize(writer, "Rock");
                    return;
            }
            throw new Exception("Cannot marshal type Genre");
        }

        public static readonly GenreConverter Singleton = new GenreConverter();
    }

    internal class TrackNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TrackName) || t == typeof(TrackName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new TrackName { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new TrackName { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type TrackName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TrackName)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type TrackName");
        }

        public static readonly TrackNameConverter Singleton = new TrackNameConverter();
    }
}
